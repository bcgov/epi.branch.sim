% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/draw_distributions.R
\name{draw_sec_infects_df}
\alias{draw_sec_infects_df}
\title{Stage secondary infections when new cases are generated}
\usage{
draw_sec_infects_df(state_df, sim_params, sim_status, import = FALSE)
}
\arguments{
\item{state_df}{\code{state_df} object for the newly generated cases}

\item{sim_params}{\code{sim_params} object (a list) containing simulation parameters.
Specifically, the \code{sim_params$sec_infect_params} object contains
the parameters for generating secondary infections.
This list should have the following entries:
\itemize{
\item \code{type}: Defines the algorithm to be used. Currently, only
"Hellewell" is implemented. This uses a negative binomial distribution
to draw the number of potential secondary infections with a mean equal
to R0*contact_rate and a dispersion equal to the value set below. Generation
intervals are drawn but only potential infections with generation intervals
earlier than the primary case's time of isolation are kept.
\item \code{disp}: The dispersion value for the negative binomial distribution
used to determine the number of potential secondary infections.
}}

\item{sim_status}{\code{sim_status} object (a list) containing simulation state vector}

\item{import}{A boolean indicating whether these new cases are imported cases instead
of secondary infections. These cases may be required to self-isolate.
Defaults to \code{FALSE}.}
}
\value{
A list containing
\itemize{
\item \code{n} - A vector with number of accepted secondary infections for each case (int)
\item \code{generation} - A list where each entry corresponds to each case and contains a
vector of generation intervals of accepted secondary infections.
\item \code{non_infects} - A list where each entry corresponds to each case and contains a
vector of generation intervals of rejected secondary infections, for debugging.
}
}
\description{
When a new case is generated, all the secondary infections are also generated and
loaded into the \code{state_df} row for the primary case. The infections are only
actually loaded into the simulation at the correct time, through the function
\code{generate_secondary_infections()} in generate_new_infections.R. To generate
secondary infections, first the number of potential secondary infections is drawn.
Then, generation intervals are generated for each potential secondary infection. Finally,
potential infections are rejected by user-defined criteria, such as being after the
isolation time for the primary case. Currently, only one type of secondary infection
algorithm is implemented (the one from Hellewell et al.). The generation intervals are
generated by a call to \code{draw_generation_interval}.
}
