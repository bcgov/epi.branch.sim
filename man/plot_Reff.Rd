% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plotting_functions.R
\name{plot_Reff}
\alias{plot_Reff}
\title{Generates plots of new secondary infections and effective R}
\usage{
plot_Reff(
  results,
  start_date,
  end_date,
  title_string = "",
  max_y_newS = NULL,
  max_y_Reff = NULL,
  log_y_newS = FALSE,
  dark_quantiles = c(0.25, 0.75),
  light_quantiles = c(0.05, 0.95)
)
}
\arguments{
\item{results}{A tibble with required columns described here}

\item{start_date}{Start of x-axis, string in "YYYY-MM-DD" format}

\item{end_date}{End of x-axis, string in "YYYY-MM-DD" format}

\item{title_string}{Title of plot}

\item{max_y_newS, max_y_Reff}{Upper limit on y-axis of new secondary and Reff plots,
defaults to \code{NULL}, which sets limit based on data}

\item{log_y_newS}{If \code{TRUE}, uses a log scale for y-axis on upper panel (number
of new secondary cases). Defaults to \code{FALSE}}

\item{dark_quantiles}{Quantile limits to use for darker shade. Default: c(0.25,0.75)}

\item{light_quantiles}{Quantile limits to use for lighter shade. Default: c(0.05,0.95)}
}
\value{
A ggplot object with two individual plots showing cumulative case counts (top) and
daily new case counts (bottom) as a function of time.
}
\description{
This function creates a two-panel figure. The top panel shows the daily number of
new secondary infections and the bottom shows the effective R. The x-axis for both is the
date. The required input parameter, \code{results} is a \code{tibble} with the
following columns:
\itemize{
\item date (\code{\link[base]{Dates}} objects),
\item n.new_S (integer, total number of secondary cases on given day)
\item Reff (double, estimate of effective R up to a given day)
}
}
\details{
The dataframe that is returned by \code{\link{run_scenarios}} can be
used as a starting point to build the \code{results} tibble needed for input to this
function. The \code{day} column from the \code{\link{run_scenarios}} output is the
day number in the simulation and can be converted to a \code{\link[base]{Dates}} object
with a real calendar date using
\preformatted{
 results <- as_tibble(results) \%>\%
   mutate(date=lubridate::as_date("2020-03-01")+lubridate::days(day)) \%>\%
   mutate_at(c("R0","initial_n","p.trace","p.symp"),as.factor)
}
where March 1, 2020 is simulation day 0 in this example.
}
